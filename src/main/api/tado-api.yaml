---
swagger: '2.0'

################################################################################
#                              API Information                                 #
################################################################################
info:
  version: v2
  title: tado° API

################################################################################
#                  Host, Base Path, Schemes and Content Types                  #
################################################################################
host: my.tado.com
basePath: /api/v2
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json

################################################################################
#                                   Tags                                       #
################################################################################
tags:
 - name: PUBLIC
   description: |
     Operations that are part of the tado° API.

################################################################################
#                                  Security                                    #
################################################################################
securityDefinitions:
  oauth:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://auth.tado.com/oauth/authorize
    tokenUrl: https://auth.tado.com/oauth/token
    scopes:
      identity:read: read the identity
      home.details:read:  read home details
      home.operation:read: read home operation
      home.operation.overlay:read: read home overlay
      home.operation.overlay:write: write home overlay

################################################################################
#                                           Paths                              #
################################################################################
paths:
    /me:
      get:
        operationId: showUser
        summary: Details about the currently logged in user
        tags:
        - PUBLIC
        security:
        - oauth:
          - identity:read
        description: |
          This will return details about the currently logged in user.
        responses:
          200:
            description: |
              User details
            schema:
              $ref: "#/definitions/User"
            examples:
              application/json:
                name: "John Doe"
                email: "john@doe.com"
                username: "john@doe.com"
                homes:
                - id: 1234
                  name: "John's home"
                locale: "en"
          401:
            $ref: "#/responses/Unauthorized"

    /homes/{home_id}:
      get:
        operationId: showHome
        summary: Details about a specific home.
        tags:
        - PUBLIC
        security:
        - oauth:
          - home.details:read
        description: |
          This will return the details of the specified home.
        parameters:
        - $ref: "#/parameters/homeID"
        responses:
          200:
            description: |
              Home details
            schema:
              $ref: "#/definitions/HomeInfo"
            examples:
              application/json:
                id: "1234"
                name: "John’s home"
                dateTimeZone: "Europe/London"
                installationCompleted: true
                partner: "HOMESERVE"
          401:
            $ref: "#/responses/Unauthorized"
          403:
            $ref: "#/responses/AccessDenied"
          404:
            $ref: "#/responses/NotFound"

    /homes/{home_id}/zones:
      get:
        operationId: listZones
        summary: List all zones of a home.
        tags:
        - PUBLIC
        security:
        - oauth:
          - home.details:read
        description: |
          This will return a list of zones that are associated with a home.
        parameters:
        - $ref: "#/parameters/homeID"
        responses:
          200:
            description: |
              List of zones
            schema:
              type: array
              items:
                $ref: "#/definitions/Zone"
            examples:
              application/json:
                - id: "1234"
                  name: "Living room"
                  type: "AIR_CONDITIONING"
                  deviceTypes:
                    - "WR01"
                - id: "1235"
                  name: "Ground floor"
                  type: "HEATING"
                  deviceTypes:
                    - "BU01"
                    - "RU01"
          401:
            $ref: "#/responses/Unauthorized"
          403:
            $ref: "#/responses/AccessDenied"
          404:
            $ref: "#/responses/NotFound"

    /homes/{home_id}/zones/{zone_id}/state:
      get:
        operationId: showZoneState
        summary: State of a zone.
        tags:
        - PUBLIC
        security:
        - oauth:
          - home.operation:read
        description: |
          This will return the current state of the specified zone.
        parameters:
        - $ref: "#/parameters/homeID"
        - $ref: "#/parameters/zoneID"
        responses:
          200:
            description: |
              Zone state.
            schema:
              $ref: "#/definitions/ZoneState"
            examples:
              application/json:
                tadoMode: SLEEP
                preparation:
                  tadoMode: HOME
                geolocationOverride: false
                overlayType: MANUAL
                overlay:
                  type: MANUAL
                  setting:
                    type: HEATING
                    power: ON
                    temperature:
                      celsius: 22.00
                      fahrenheit: 71.60
                    termination:
                      type: MANUAL
                setting:
                  type: HEATING
                  power: ON
                  temperature:
                    celsius: 22.00
                    fahrenheit: 71.60
                link:
                  state: ONLINE
                activityDataPoints:
                  heatingPower:
                    type: PERCENTAGE
                    percentage: 61.00
                    timestamp: "2015-07-24T09:18:17.884Z"
                sensorDataPoints:
                  insideTemperature:
                    type: TEMPERATURE
                    celsius: 21.60
                    fahrenheit: 70.90
                    timestamp: "2015-07-24T09:18:17.884Z"
                  humidity:
                    type: PERCENTAGE
                    percentage: 73.50
                    timestamp: "2015-07-24T09:18:17.884Z"
          401:
            $ref: "#/responses/Unauthorized"
          403:
            $ref: "#/responses/AccessDenied"
          404:
            $ref: "#/responses/NotFound"

    /homes/{home_id}/zones/{zone_id}/details:
      get:
        operationId: showZoneDetails
        summary: Details of a zone.
        tags:
        - PUBLIC
        security:
        - oauth:
          - home.operation:read
        parameters:
        - $ref: "#/parameters/homeID"
        - $ref: "#/parameters/zoneID"
        responses:
          200:
            description: |
              Zone details.
            schema:
              $ref: "#/definitions/Zone"
            examples:
              application/json:
                id: "1234"
                name: "Living room"
                type: "AIR_CONDITIONING"
          401:
            $ref: "#/responses/Unauthorized"
          403:
            $ref: "#/responses/AccessDenied"
          404:
            $ref: "#/responses/NotFound"

    /homes/{home_id}/zones/{zone_id}/defaultOverlay:
      get:
        operationId: showZoneDefaultOverlay
        summary: Preferences for default overlay. If an overlay is created without a termination condition (e.g through the device UI), the given termination condition is taken for this overlay.
        tags:
        - PUBLIC
        security:
        - oauth:
          - home.operation:read
        parameters:
        - $ref: "#/parameters/homeID"
        - $ref: "#/parameters/zoneID"
        responses:
          200:
            description: |
              Preferences for default overlay.
            schema:
              $ref: "#/definitions/OverlayTemplate"
            examples:
              application/json:
                terminationCondition:
                  type: "TIMER"
                  durationInSeconds: 300
          401:
            $ref: "#/responses/Unauthorized"
          403:
            $ref: "#/responses/AccessDenied"
          404:
            $ref: "#/responses/NotFound"

    /homes/{home_id}/zones/{zone_id}/overlay:
      get:
        operationId: showZoneOverlay
        summary: Overlay of a zone
        tags:
        - PUBLIC
        security:
        - oauth:
          - home.operation.overlay:read
        description: |
          This will return the current overlay of the specified zone.
        parameters:
        - $ref: "#/parameters/homeID"
        - $ref: "#/parameters/zoneID"
        responses:
          200:
            description: |
              Zone overlay.
            schema:
              $ref: "#/definitions/Overlay"
            examples:
              application/json:
                type: MANUAL
                setting:
                  type: HEATING
                  power: ON
                  temperature:
                    celsius: 22.00
                    fahrenheit: 71.60
                termination:
                  type: MANUAL
          401:
            $ref: "#/responses/Unauthorized"
          403:
            $ref: "#/responses/AccessDenied"
          404:
            $ref: "#/responses/NotFound"

      put:
        operationId: updateZoneOverlay
        summary: Set a new overlay
        tags:
        - PUBLIC
        security:
        - oauth:
          - home.operation.overlay:write
        description: |
          This will set the overlay for the specified zone of a home.
        parameters:
        - $ref: "#/parameters/homeID"
        - $ref: "#/parameters/zoneID"
        - name: json
          in: body
          description: |
            The new overlay settings.
          required: true
          schema:
            $ref: "#/definitions/Overlay"
        responses:
          200:
            description: |
              Zone overlay.
            schema:
              $ref: "#/definitions/Overlay"
            examples:
              application/json:
                setting:
                  type: HEATING
                  power: ON
                  temperature:
                    celsius: 22.00
                termination:
                  type: MANUAL
          400:
            $ref: "#/responses/BadRequest"
          401:
            $ref: "#/responses/Unauthorized"
          403:
            $ref: "#/responses/AccessDenied"
          404:
            $ref: "#/responses/NotFound"
          422:
            $ref: "#/responses/UnprocessableEntity"

      delete:
        operationId: deleteZoneOverlay
        summary: Delete an overlay
        tags:
        - PUBLIC
        security:
        - oauth:
          - home.operation.overlay:write
        description: |
          This will delete the overlay for the specified zone of a home.
        parameters:
        - $ref: "#/parameters/homeID"
        - $ref: "#/parameters/zoneID"
        responses:
          204:
            description: |
              Overlay successfully deleted.
          401:
            $ref: "#/responses/Unauthorized"
          403:
            $ref: "#/responses/AccessDenied"
          404:
            $ref: "#/responses/NotFound"

    /homes/{home_id}/zones/{zone_id}/capabilities:
      get:
        operationId: showZoneCapabilities
        summary: Capabilities of a zone
        tags:
        - PUBLIC
        security:
        - oauth:
          - home.details:read
        description: |
          This will return the capabilities of the specified zone.
        parameters:
        - $ref: "#/parameters/homeID"
        - $ref: "#/parameters/zoneID"
        responses:
          200:
            description: |
              Zone capabilities.
            schema:
              $ref: "#/definitions/GenericZoneCapabilities"
          401:
            $ref: "#/responses/Unauthorized"
          403:
            $ref: "#/responses/AccessDenied"
          404:
            $ref: "#/responses/NotFound"

    /homes/{home_id}/mobileDevices:
      get:
        operationId: listMobileDevices
        summary: List all mobile devices associated with this home.
        tags:
        - PUBLIC
        security:
        - oauth:
          - home.details:read
        parameters:
        - $ref: "#/parameters/homeID"
        responses:
          200:
            description: |
              (Potentially empty) list of mobile devices associated with this home.
            schema:
              type: array
              items:
                $ref: "#/definitions/MobileDevice"
              minItems: 0
          401:
            $ref: "#/responses/Unauthorized"
          403:
            $ref: "#/responses/AccessDenied"
          404:
            $ref: "#/responses/NotFound"

################################################################################
#                                 Definitions                                  #
################################################################################
definitions:
  TemperatureObject:
    description: |
      A temperature specified in degrees celsius and fahrenheit.
    type: object
    properties:
      celsius:
        description: |
          The temperature in celsius.
        type: number
        format: float
      fahrenheit:
        description: |
          The temperature in fahrenheit.
        type: number
        format: float

  Link:
    description: |
      Details about the current link of a system.
    type: object
    properties:
      state:
        description: |
          The state of the link.
        type: string
        enum:
        - ONLINE
        - OFFLINE
      reason:
        description: |
          Details about the current state.
        type: object
        properties:
          code:
            description: |
              Message key intended for i18n.
            type: string
          title:
            description: |
              Short english error description, should not be presented to the user.
            type: string
    required:
    - state

  User:
    type: object
    properties:
      name:
        description: |
          Full name of the user.
        type: string
      id:
        description: |
          Unique indentifier of the user.
        type: string
      email:
        description: |
          Email of the user.
        type: string
      username:
        description: |
          Username of the user.
        type: string
      homes:
        description: |
          List of Homes of the user, with their IDs.
        type: array
        items:
          type: object
          properties:
            id:
              description: |
                The ID of the home
              type: integer
              format: int32
      mobileDevices:
        description: |
          List of Mobile Devices registered by the user.
        type: array
        items:
          $ref: '#/definitions/MobileDevice'
      locale:
        description: |
          Locale string in format of Java [Locale.toString()](http://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#toString--)
        type: string
    required:
    - name
    - email
    - username

  TemperatureUnit:
    type: string
    enum:
    - CELSIUS
    - FAHRENHEIT

  HomeInfo:
    type: object
    properties:
      id:
        description: |
          ID of the home.
        type: integer
        format: int32
      name:
        description: |
          User defined name for the home.
        type: string
      dateTimeZone:
        description: |
          Time zone ID of the home time zone.
        type: string
      dateCreated:
        description: |
          Timestamp of home creation.
        type: string
        format: date-time
      temperatureUnit:
        description: |
          The preferred temperature unit of the home.
        $ref: "#/definitions/TemperatureUnit"
      installationCompleted:
        description: |
          Whether the home has an ongoing installation or it is operational. This does not directly correspond whether an installation process is available! There are cases where a home has a completed installation but not installation process.
          This property is deprecated since the future of how installations will work is unclear.
        type: boolean
      partner:
        description: |
          The partner this home has used to install tado, null if none.
        type: string
      geolocation:
        description: The geolocation of this home. Absent, if the OAuth scope `home.contact:read` is not granted.
        $ref: '#/definitions/Geolocation'
      address:
        description: The address of this home. Absent, if the OAuth scope `home.contact:read` is not granted.
        $ref: '#/definitions/Address'
      contactDetails:
        description: The contact details of this home. Absent, if the OAuth scope `home.contact:read` is not granted.
        $ref: '#/definitions/ContactDetails'
      simpleSmartScheduleEnabled:
        description: Deprecated, returns `true` for all homes. Activation state of the new simple smart schedule. Property will be removed after all schedules are transitioned to the new simple schedule!
        type: boolean
      awayRadiusInMeters:
        description: Distance from home geolocation at which user geolocation is considered away
        type: number
        format: double
    required:
    - id
    - name
    - dateTimeZone
    - temperatureUnit
    - installationCompleted
    - simpleSmartScheduleEnabled
    - awayRadiusInMeters

  TadoSystemType:
    description: |
      The system type of the zone.
    type: string
    enum:
    - HEATING
    - AIR_CONDITIONING
    - HOT_WATER
    readOnly: true

  Zone:
    type: object
    properties:
      id:
        description: |
          ID of the zone.
        type: integer
        format: int32
        readOnly: true
      name:
        description: |
          User defined name for the zone.
        type: string
      type:
        $ref: "#/definitions/TadoSystemType"
      dateCreated:
        type: string
        format: date-time
      deviceTypes:
        description: |
          Deprecated - use `devices`. List of hardware device types belonging to this zone.
        type: array
        readOnly: true
        items:
          $ref: "#/definitions/DeviceType"
      devices:
        description: |
          List of hardware devices belonging to this zone.
        type: array
        readOnly: true
        items:
          $ref: '#/definitions/HardwareDeviceInZone'
      dazzleMode:
        type: object
        properties:
          supported:
            description: Dazzling capability information of the given zone. False if dazzling is not supported, true otherwise.
            type: boolean
            readOnly: true
          enabled:
            description: Dazzling enabled on the leader device.
            type: boolean
            readOnly: true
      openWindowDetection:
        type: object
        properties:
          supported:
            type: boolean
          enabled:
            type: boolean
          timeoutInSeconds:
            type: integer
    required:
    - id
    - name
    - type
    - dateCreated

  Power:
    type: string
    description: |
      General use enum to indicate on/off state.
    enum:
    # we have to quote these values for proper code-gen due to bug: https://github.com/swagger-api/swagger-codegen/issues/2559
    - 'ON'
    - 'OFF'

  GenericZoneSetting:
    type: object
    discriminator: type
    properties:
      type:
        $ref: "#/definitions/TadoSystemType"
    required:
    - type

  HeatingZoneSetting:
    allOf:
    - $ref: "#/definitions/GenericZoneSetting"
    - properties:
        power:
          description: |
            Whether the heating should be ON or OFF.
          $ref: "#/definitions/Power"
        temperature:
          description: |
            The desired temperature, if power is `ON`.
          $ref: "#/definitions/TemperatureObject"
      required:
      - power

  AcFanSpeed:
    type: string
    description: |
      Cooling system fan speed.
    enum:
    - LOW
    - MIDDLE
    - HIGH
    - AUTO

  AcMode:
    type: string
    description: |
      Cooling system mode.
    enum:
    - COOL
    - HEAT
    - DRY
    - FAN
    - AUTO

  CoolingZoneSetting:
    allOf:
    - $ref: "#/definitions/GenericZoneSetting"
    - properties:
        power:
          description: |
            Whether the AC should be ON or OFF.
          $ref: "#/definitions/Power"
        mode:
          description: |
            The desired AC mode, if power is `ON`.
          $ref: "#/definitions/AcMode"
        temperature:
          description: |
            The desired temperature, if power is `ON` and temperatures are supported in this AC mode.
          $ref: "#/definitions/TemperatureObject"
        fanSpeed:
          description: |
            The desired fan speed, if power is `ON` and fan speeds are supported in this AC mode.
          $ref: "#/definitions/AcFanSpeed"
        swing:
          description: |
            Whether the angle of the air stream should be fixed or not, if power is `ON` and configuring this is
            supported in this AC mode.
          $ref: "#/definitions/Power"
      required:
      - power

  HotWaterZoneSetting:
    allOf:
    - $ref: "#/definitions/GenericZoneSetting"
    - properties:
        power:
          description: |
            Whether domestic hot water should be produced or not.
          $ref: "#/definitions/Power"
        temperature:
          description: |
            The desired hot water temperature, if power is `ON`. Only available if setting a temperature for hot water is
            supported by the heating setup.
          $ref: "#/definitions/TemperatureObject"
      required:
      - power

  GenericDataPoint:
    type: object
    properties:
      value:
        type: string
      timestamp:
        description: |
          Measurement timestamp
        type: string
        format: date-time
    required:
    - value
    - timestamp

  ActivityDataPoints:
    type: object
    properties:
      heatingPower:
        $ref: "#/definitions/PercentageDataPoint"

  SensorDataPoints:
    type: object
    properties:
      insideTemperature:
        $ref: "#/definitions/TemperatureDataPoint"
      humidity:
        $ref: "#/definitions/PercentageDataPoint"

  SensorDataPoint:
    type: object
    discriminator: type
    properties:
      type:
        description: |
          Data type of the value.
        type: string
        enum:
        - TEMPERATURE
        - PERCENTAGE
    required:
    - type

  TemperatureDataPoint:
    allOf:
    - $ref: "#/definitions/SensorDataPoint"
    - properties:
        timestamp:
            description: |
              Measurement timestamp
            type: string
            format: date-time
        celsius:
          description: |
            The temperature in celsius.
          type: number
          format: float
        fahrenheit:
          description: |
            The temperature in fahrenheit.
          type: number
          format: float
        precision:
          $ref: "#/definitions/TemperaturePrecision"
      required:
      - timestamp

  TemperaturePrecision:
    type: object
    properties:
      celsius:
        description: The precision of the celsius value with 1 meaning full degrees and 0.1 one decimal.
        type: number
        format: float
        minimum: 0.1
        maximum: 1.0
      fahrenheit:
        description: The precision of the fahrenheit value with 1 meaning full degrees and 0.1 one decimal.
        type: number
        format: float
        minimum: 0.1
        maximum: 1.0

  PercentageDataPoint:
    allOf:
    - $ref: "#/definitions/SensorDataPoint"
    - properties:
        timestamp:
            description: |
              Measurement timestamp
            type: string
            format: date-time
        percentage:
          description: |
            Relative value (0-100)
          type: number
          format: float
          minimum: 0.0
          maximum: 100.0
      required:
      - timestamp
      - percentage

  TadoMode:
    type: string
    enum:
    - HOME
    - SLEEP
    - AWAY

  Preparation:
    description: |
      Contains preparation target if tado is preparing for an upcoming mode, otherwise null.
    type: object
    properties:
      tadoMode:
        $ref: "#/definitions/TadoMode"
      end:
        type: string
        format: date-time
      setting:
        $ref: "#/definitions/GenericZoneSetting"
    required:
    - tadoMode
    - end
    - setting

  OverlayTerminationConditionType:
    type: string
    description: |
      When the overlay terminates. `MANUAL`: only when manually removed, `TADO_MODE`: when the current tado mode or the block schedule setting changes, `TIMER`: at a fixed point in time.
    enum:
    - MANUAL
    - TADO_MODE
    - TIMER

  ZoneState:
    type: object
    properties:
      tadoMode:
        description: |
          The current tado mode of the zone.
        $ref: "#/definitions/TadoMode"
      preparation:
        description: |
          Contains preparation target if tado is preparing for an upcoming mode, otherwise null.
        $ref: "#/definitions/Preparation"
      geolocationOverride:
        description: |
          Whether the geolocation is detected (through the geolocations of the app users) or
          overridden (by "always active" blocks of the block schedule).
        type: boolean
      overlay:
        description: |
          The currently active overlay for the zone, `null` if none.
        $ref: "#/definitions/Overlay"
      openWindow:
        description: |
          The currently active open window for the zone, `null` if none.
        $ref: "#/definitions/OpenWindow"
      setting:
        description: |
          Current setting of the zone.
        $ref: "#/definitions/GenericZoneSetting"
      link:
        description: |
          Link object of current zone connection.
        $ref: "#/definitions/Link"
      activityDataPoints:
        $ref: "#/definitions/ActivityDataPoints"
      sensorDataPoints:
        $ref: "#/definitions/SensorDataPoints"
    required:
    - tadoMode
    - preparation
    - geolocationOverride
    - setting
    - link
    - activityDataPoints
    - sensorDataPoints

  Overlay:
    type: object
    properties:
      type:
        description: |
          DEPRECATED. Only used for backward compatibility reasons (mainly for AT&T). The notion of an 'overlay type' was dropped in favor for a type of 'termination' of an overlay, which is more specific. Thus, omit this property and use the termination object below instead.
        $ref: "#/definitions/OverlayTerminationConditionType"
      setting:
        description: |
          Current setting of the zone.
        $ref: "#/definitions/GenericZoneSetting"
      termination:
        description: |
          The condition when the overlay is removed. Mandatory (except when 'type' is set, for backward compatibility reasons, see description for 'type').
        $ref: "#/definitions/OverlayTerminationCondition"
    required:
    - setting

  OverlayTerminationCondition:
    type: object
    discriminator: type
    properties:
      type:
        $ref: "#/definitions/OverlayTerminationConditionType"
      projectedExpiry:
        description: |
          [ISO8601 datetime](https://en.wikipedia.org/wiki/ISO_8601). E.g.: `2015-09-28T15:03:20Z` with second precision. Only relevant when receiving an overlay, ignored when overlay is sent to the server. Indicates the expected time of termination for this overlay, if no app user moves. `null` means that the overlay never expires (by itself, unless manully removed).
        type: string
        format: date-time
        readOnly: true
    required:
    - type

  ManualTerminationCondition:
    description: |
      The overlay only terminates when it is manually removed.
    allOf:
    - $ref: "#/definitions/OverlayTerminationCondition"

  TadoModeTerminationCondition:
    description: |
      The overlay terminates when the tado mode changes or when the setting (power, temperature, ...) of the underlying block schedule changes (or when removed manually).
    allOf:
    - $ref: "#/definitions/OverlayTerminationCondition"

  TimerTerminationCondition:
    description: |
      The overlay terminates at a certain point in time (or when removed manually).
    allOf:
    - $ref: "#/definitions/OverlayTerminationCondition"
    - properties:
        durationInSeconds:
          description: |
            The number of seconds that the overlay should last/was configured to last.
          type: integer
          minimum: 0
        expiry:
          description: |
            [ISO8601 datetime](https://en.wikipedia.org/wiki/ISO_8601). E.g.: `2015-09-28T15:03:20Z` with second precision. Only relevant when receiving an overlay, ignored when overlay is sent to the server.
          type: string
          format: date-time
          readOnly: true
        remainingTimeInSeconds:
          description: |
            The number of seconds that are remaining of the timer overlay at the time that the response is assembled by the server.
          type: integer
          minimum: 0
      required:
      - durationInSeconds

  OpenWindow:
    description: |
      The open window expires at a certain point in time (or when ignored).
    properties:
      durationInSeconds:
        description: |
          The number of seconds that the open window should last/was configured to last.
        type: integer
        minimum: 0
      expiry:
        description: |
          [ISO8601 datetime](https://en.wikipedia.org/wiki/ISO_8601). E.g.: `2015-09-28T15:03:20Z` with second precision.
        type: string
        format: date-time
      remainingTimeInSeconds:
        description: |
          The number of seconds that are remaining of the open window at the time that the response is assembled by the server.
        type: integer
        minimum: 0

  OverlayTemplate:
    description: |
      The from which an instance of an overlay can be created. It is used to set default values not provided when creating an overlay.
    type: object
    properties:
      terminationCondition:
        $ref: "#/definitions/OverlayTerminationConditionTemplate"
    required:
    - terminationCondition

  OverlayTerminationConditionTemplate:
    type: object
    description: |
      A template to be used e.g. as a default for an overlay's termination condition. See `OverlayTerminationCondition` definition for more info.
    discriminator: type
    properties:
      type:
        $ref: "#/definitions/OverlayTerminationConditionType"
    required:
    - type

  TimerTerminationConditionTemplate:
    allOf:
    - $ref: "#/definitions/OverlayTerminationConditionTemplate"
    - properties:
        durationInSeconds:
          description: |
            The number of seconds that the overlay should last/was configured to last.
          type: integer
          minimum: 0
      required:
      - durationInSeconds

  MobileDevice:
    type: object
    description: |
      A (mobile) device that has the tado app installed. This is used to track its geolocation, track its app version and device metadata, and deliver push notifications to it.  If the `geoTrackingEnabled` setting is `true`, then there is a `location` property, if it is `false`, the `location` property is omitted.
    properties:
      id:
        type: integer
        format: int32
        readOnly: true
      name:
        type: string
        description: |
          The name that the user chose for his mobile device when creating it.
        maxLength: 255
      settings:
        $ref: "#/definitions/MobileDeviceSettings"
      deviceMetadata:
        description: Metadata for device identification, like model, platform, OS version, locale
        $ref: "#/definitions/MobileDeviceDeviceMetadata"
        readOnly: true
      location:
        description: |
          The device's last reported location. Is `null`, if there was no location reported yet. If there is any location (though it might be `stale`), there is a location object.
        $ref: "#/definitions/MobileDeviceLocation"
    required:
    - name
    - settings

  MobileDeviceSettings:
    type: object
    properties:
      geoTrackingEnabled:
        type: boolean
        description: |
          Whether this device's location is reported to the server so that this decice participates in the geolocation logic of controlling the home.
    required:
    - geoTrackingEnabled

  MobileDeviceLocation:
    type: object
    properties:
      stale:
        type: boolean
        description: |
          Whether the last received geolocation of the device is older than 48h (though this depends on a configuration per mobile device).
      atHome:
        type: boolean
        description: |
          Whether the mobile device, based on the last reported geolocation is within the home fence (which by default is 400m, but can be configured per home).
      bearingFromHome:
        description: |
          When starting to walk from the home to the current location of the mobile device, what is the starting angle (0° is north, angle increasing clockwise). See [Movable Type Lat/Long calculations](http://www.movable-type.co.uk/scripts/latlong.html) for formula.
        $ref: "#/definitions/Angle"
      relativeDistanceFromHomeFence:
        type: number
        format: float
        description: |
          Computed value indicating the distance from the home fence based on a [log scale](https://github.com/tadodotcom/TadoGrailsApp/issues/10523). 0 within the home fence. Is mainly used for displaying the 'user radar'.
        minimum: 0
        exclusiveMinimum: false
        maximum: 1
        exclusiveMaximum: false
    required:
    - stale
    - atHome
    - bearingFromHome
    - relativeDistanceFromHomeFence

  MobileDeviceDeviceMetadata:
    type: object
    properties:
      model:
        type: string
        description: |
          The model name of the mobile device, e.g. "Samsung Galaxy Nexus".
        maxLength: 255
      platform:
        type: string
        description: |
          Android, iOS, or Windows Phone (`WP`).
        enum:
          - Android
          - iOS
          - WP
      osVersion:
        type: string
        description: |
          The version of the device's operating system.
        maxLength: 20
      locale:
        type: string
        description: |
          The locale setting of the device, e.g. `de`.
        maxLength: 12
    required:
    - model
    - platform
    - osVersion

  Angle:
    type: object
    description: |
      Represents an angular measure in degrees and radians.
    properties:
      degrees:
        type: number
        format: float
        minimum: 0
        exclusiveMinimum: false
        maximum: 360
        exclusiveMaximum: true
      radians:
        type: number
        format: float
        minimum: 0
        exclusiveMinimum: false
        maximum: 6.2832

  Geolocation:
    type: object
    description: Geolocation
    properties:
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
    required:
    - latitude
    - longitude

  ContactDetails:
    type: object
    description: Contact details
    properties:
      name:
        description: The full name of a resident
        type: string
      email:
        description: |
          The email of a resident, must not have leading/trailing spaces
        type: string
        format: email
      phone:
        type: string
        format: phonenumber
    required:
    - name
    - email
    - phone

  Address:
    type: object
    description: Address
    properties:
      addressLine1:
        type: string
      addressLine2:
        type: string
      zipCode:
        type: string
      city:
        type: string
      state:
        type: string
      country:
        description: |
          3 digit ISO country code, e.g. `DEU`, `USA`, `CZE`
        type: string
    required:
    - addressLine1
    - zipCode
    - city
    - country

  DeviceType:
    type: string
    description: |
      Type of device - short name
    enum:
    - TS01
    - TS02
    - GW01
    - GW02
    - GW03
    - IB01
    - BY01
    - BX01
    - BX02
    - BU01
    - RU01
    - WR01
    - VA01

  GenericHardwareDevice:
    type: object
    discriminator: deviceType
    properties:
      deviceType:
        $ref: "#/definitions/DeviceType"
      serialNo:
        description: |
          Serial number of device.
        type: string
      shortSerialNo:
        description: |
          Short serial number of device.
        type: string
      connectionState:
        description: |
          Current state of connection.
        $ref: "#/definitions/GenericDataPoint"
      characteristics:
        description: |
          Device characteristics.
        $ref: "#/definitions/HardwareDeviceCharacteristics"
      currentFwVersion:
        description: |
          Current firmware version of device.
        type: string
    required:
    - deviceType
    - serialNo
    - shortSerialNo
    - connectionState
    - characteristics
    - currentFwVersion

  DeviceDuty:
    type: string
    enum:
    - ZONE_UI
    - CIRCUIT_DRIVER
    - ZONE_DRIVER
    - ZONE_LEADER

  DeviceInZoneDetails:
    type: object
    properties:
      duties:
        type: array
        description: A list of duties that the device is responsible for
        items:
          $ref: "#/definitions/DeviceDuty"
    required:
    - duties

  HardwareDeviceInZone:
    allOf:
    - $ref: "#/definitions/GenericHardwareDevice"
    - $ref: "#/definitions/DeviceInZoneDetails"

  DeviceCapability:
    type: string
    enum:
    - INSIDE_TEMPERATURE_MEASUREMENT
    - IDENTIFY
    - OPEN_WINDOW_DETECTION
    - RADIO_ENCRYPTION_KEY_ACCESS

  HardwareDeviceCharacteristics:
    type: object
    properties:
      capabilities:
        description: |
          The capabilities that are supported by the device.
        type: array
        items:
          $ref: "#/definitions/DeviceCapability"
    required:
    - capabilities

  GenericZoneCapabilities:
    type: object
    discriminator: type
    properties:
      type:
        description: |
          The system type of the zone. Depending on the value of `type`, either `AirConditioningCapabilities`, `HeatingCapabilities` or `HotWaterCapabilities` is returned.
        $ref: "#/definitions/TadoSystemType"
    required:
    - type

  AirConditioningCapabilities:
    allOf:
    - $ref: "#/definitions/GenericZoneCapabilities"
    - properties:
        COOL:
          $ref: "#/definitions/AcModeCapabilities"
        HEAT:
          $ref: "#/definitions/AcModeCapabilities"
        DRY:
          $ref: "#/definitions/AcModeCapabilities"
        FAN:
          $ref: "#/definitions/AcModeCapabilities"
        AUTO:
          $ref: "#/definitions/AcModeCapabilities"

  AcModeCapabilities:
    properties:
      temperatures:
        $ref: "#/definitions/TemperatureRange"
      fanSpeeds:
        description: |
          Cooling system fan speed.
        type: array
        items:
          $ref: "#/definitions/AcFanSpeed"
      swings:
        description: |
          Cooling system swing mode.
        type: array
        items:
          $ref: "#/definitions/Power"

  HeatingCapabilities:
    allOf:
    - $ref: "#/definitions/GenericZoneCapabilities"
    - properties:
        temperatures:
          $ref: "#/definitions/TemperatureRange"
      required:
      - temperatures

  HotWaterCapabilities:
    allOf:
    - $ref: "#/definitions/GenericZoneCapabilities"
    - properties:
        canSetTemperature:
          type: boolean
          description: True if hot water zone can set temperature, false otherwise.
        temperatures:
          $ref: "#/definitions/TemperatureRange"
          description: Temperature range of hot water zone. Only set if `canSetTemperature` is `true`.
      required:
      - canSetTemperature

  TemperatureRange:
    properties:
      celsius:
        $ref: "#/definitions/IntRange"
      fahrenheit:
        $ref: "#/definitions/IntRange"

  IntRange:
    type: object
    properties:
      min:
        description: Minimum range value.
        type: integer
      max:
        description: Maximum range value.
        type: integer
      step:
        description: Step size between min and max.
        type: number
        format: float
    required:
    - min
    - max
    - step

  ClientError:
    type: object
    properties:
      code:
        type: string
        description: |
          Error identifier
      title:
        type: string
        description: |
          Detailed error message. Just for informational purposes. Might change at any time!
    required:
    - code
    - title

  ClientErrorModel:
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: "#/definitions/ClientError"

################################################################################
#                                 Path Parameters                              #
################################################################################
parameters:
  homeID:
    name: home_id
    description: The ID of a home.
    in: path
    type: integer
    format: int64
    required: true
  zoneID:
    name: zone_id
    description: The ID of a zone.
    in: path
    type: integer
    format: int64
    required: true

responses:
  BadRequest:
    description: |
      Bad request, wrong type of parameters, etc.
    schema:
      $ref: "#/definitions/ClientErrorModel"
  Unauthorized:
    description: |
      User authentication failed.
    schema:
      $ref: "#/definitions/ClientErrorModel"
  AccessDenied:
    description: |
      Authenticated user has no access rights to the requested entity.
    schema:
      $ref: "#/definitions/ClientErrorModel"
  NotFound:
    description: |
      Requested entity not found.
    schema:
      $ref: "#/definitions/ClientErrorModel"
  UnprocessableEntity:
    description: |
      The request was well-formed but was unable to be followed due to semantic errors.
    schema:
      $ref: "#/definitions/ClientErrorModel"
